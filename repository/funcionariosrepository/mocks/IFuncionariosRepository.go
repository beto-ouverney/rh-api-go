// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	customerror "github.com/beto-ouverney/rh-api/customerror"
	entity "github.com/beto-ouverney/rh-api/entity"

	mock "github.com/stretchr/testify/mock"
)

// IFuncionariosRepository is an autogenerated mock type for the IFuncionariosRepository type
type IFuncionariosRepository struct {
	mock.Mock
}

// GetAll provides a mock function with given fields: ctx
func (_m *IFuncionariosRepository) GetAll(ctx context.Context) (*[]entity.Funcionario, *customerror.CustomError) {
	ret := _m.Called(ctx)

	var r0 *[]entity.Funcionario
	if rf, ok := ret.Get(0).(func(context.Context) *[]entity.Funcionario); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.Funcionario)
		}
	}

	var r1 *customerror.CustomError
	if rf, ok := ret.Get(1).(func(context.Context) *customerror.CustomError); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*customerror.CustomError)
		}
	}

	return r0, r1
}

// GetAllCache provides a mock function with given fields:
func (_m *IFuncionariosRepository) GetAllCache() (*string, *customerror.CustomError) {
	ret := _m.Called()

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	var r1 *customerror.CustomError
	if rf, ok := ret.Get(1).(func() *customerror.CustomError); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*customerror.CustomError)
		}
	}

	return r0, r1
}

// GetByCPF provides a mock function with given fields: ctx, cpf
func (_m *IFuncionariosRepository) GetByCPF(ctx context.Context, cpf string) (*entity.Funcionario, *customerror.CustomError) {
	ret := _m.Called(ctx, cpf)

	var r0 *entity.Funcionario
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Funcionario); ok {
		r0 = rf(ctx, cpf)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Funcionario)
		}
	}

	var r1 *customerror.CustomError
	if rf, ok := ret.Get(1).(func(context.Context, string) *customerror.CustomError); ok {
		r1 = rf(ctx, cpf)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*customerror.CustomError)
		}
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *IFuncionariosRepository) GetByID(ctx context.Context, id string) (*entity.Funcionario, *customerror.CustomError) {
	ret := _m.Called(ctx, id)

	var r0 *entity.Funcionario
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Funcionario); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Funcionario)
		}
	}

	var r1 *customerror.CustomError
	if rf, ok := ret.Get(1).(func(context.Context, string) *customerror.CustomError); ok {
		r1 = rf(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*customerror.CustomError)
		}
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, funcionario
func (_m *IFuncionariosRepository) Register(ctx context.Context, funcionario entity.Funcionario) (*int64, *customerror.CustomError) {
	ret := _m.Called(ctx, funcionario)

	var r0 *int64
	if rf, ok := ret.Get(0).(func(context.Context, entity.Funcionario) *int64); ok {
		r0 = rf(ctx, funcionario)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int64)
		}
	}

	var r1 *customerror.CustomError
	if rf, ok := ret.Get(1).(func(context.Context, entity.Funcionario) *customerror.CustomError); ok {
		r1 = rf(ctx, funcionario)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*customerror.CustomError)
		}
	}

	return r0, r1
}

// SetCacheGetAllEmployees provides a mock function with given fields: funcionarios
func (_m *IFuncionariosRepository) SetCacheGetAllEmployees(funcionarios *[]entity.Funcionario) *customerror.CustomError {
	ret := _m.Called(funcionarios)

	var r0 *customerror.CustomError
	if rf, ok := ret.Get(0).(func(*[]entity.Funcionario) *customerror.CustomError); ok {
		r0 = rf(funcionarios)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerror.CustomError)
		}
	}

	return r0
}

type mockConstructorTestingTNewIFuncionariosRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewIFuncionariosRepository creates a new instance of IFuncionariosRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIFuncionariosRepository(t mockConstructorTestingTNewIFuncionariosRepository) *IFuncionariosRepository {
	mock := &IFuncionariosRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
