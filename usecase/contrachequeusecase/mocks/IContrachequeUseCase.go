// Code generated by mockery v2.14.0. DO NOT EDIT.

package usecasemocks

import (
	context "context"

	customerror "github.com/beto-ouverney/rh-api/customerror"

	entity "github.com/beto-ouverney/rh-api/entity"

	mock "github.com/stretchr/testify/mock"
)

// IContrachequeUseCase is an autogenerated mock type for the IContrachequeUseCase type
type IContrachequeUseCase struct {
	mock.Mock
}

// GetByFuncionarioID provides a mock function with given fields: ctx, employeeID
func (_m *IContrachequeUseCase) GetByFuncionarioID(ctx context.Context, employeeID string) (*entity.Contracheque, *customerror.CustomError) {
	ret := _m.Called(ctx, employeeID)

	var r0 *entity.Contracheque
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Contracheque); ok {
		r0 = rf(ctx, employeeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Contracheque)
		}
	}

	var r1 *customerror.CustomError
	if rf, ok := ret.Get(1).(func(context.Context, string) *customerror.CustomError); ok {
		r1 = rf(ctx, employeeID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*customerror.CustomError)
		}
	}

	return r0, r1
}

type mockConstructorTestingTNewIContrachequeUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewIContrachequeUseCase creates a new instance of IContrachequeUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIContrachequeUseCase(t mockConstructorTestingTNewIContrachequeUseCase) *IContrachequeUseCase {
	mock := &IContrachequeUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
