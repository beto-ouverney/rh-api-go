// Code generated by mockery v2.14.0. DO NOT EDIT.

package mockscontroller

import (
	context "context"

	customerror "github.com/beto-ouverney/rh-api/customerror"

	entity "github.com/beto-ouverney/rh-api/entity"

	mock "github.com/stretchr/testify/mock"
)

// IFuncionariosController is an autogenerated mock type for the IFuncionariosController type
type IFuncionariosController struct {
	mock.Mock
}

// GetAll provides a mock function with given fields: ctx
func (_m *IFuncionariosController) GetAll(ctx context.Context) ([]byte, *customerror.CustomError) {
	ret := _m.Called(ctx)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context) []byte); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 *customerror.CustomError
	if rf, ok := ret.Get(1).(func(context.Context) *customerror.CustomError); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*customerror.CustomError)
		}
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *IFuncionariosController) GetByID(ctx context.Context, id string) ([]byte, *customerror.CustomError) {
	ret := _m.Called(ctx, id)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, string) []byte); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 *customerror.CustomError
	if rf, ok := ret.Get(1).(func(context.Context, string) *customerror.CustomError); ok {
		r1 = rf(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*customerror.CustomError)
		}
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, funcionario
func (_m *IFuncionariosController) Register(ctx context.Context, funcionario entity.Funcionario) ([]byte, *customerror.CustomError) {
	ret := _m.Called(ctx, funcionario)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, entity.Funcionario) []byte); ok {
		r0 = rf(ctx, funcionario)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 *customerror.CustomError
	if rf, ok := ret.Get(1).(func(context.Context, entity.Funcionario) *customerror.CustomError); ok {
		r1 = rf(ctx, funcionario)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*customerror.CustomError)
		}
	}

	return r0, r1
}

type mockConstructorTestingTNewIFuncionariosController interface {
	mock.TestingT
	Cleanup(func())
}

// NewIFuncionariosController creates a new instance of IFuncionariosController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIFuncionariosController(t mockConstructorTestingTNewIFuncionariosController) *IFuncionariosController {
	mock := &IFuncionariosController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
